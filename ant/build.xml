<?xml version="1.0" encoding="windows-1252"?>

<!--
=======================================================================
Fichero de configuración para la construcción del proyecto.

Es un fichero de configuración de ANT [http://ant.apache.org].

Consta de un conjunto de comandos (targets) que permiten realizar
distintas operaciones sobre los ficheros del proyecto.

Lee las variables del proyecto del fichero 'project.xml' y de
'user.xml' (si existe). En caso de que exista el fichero 'user.xml',
las variables definidas en este fichero sobreescribirán a las que
existiesen en 'project.xml'.

Se graba un registro del proceso de construcción en el fichero
'build.log'

Más información acerca de este fichero en el archivo 'readme.xhtml'.

PENDIENTE:
    * Documentar los ficheros de esta plantilla.
    * Redactar pruebas de esta plantilla.
    * Escribir una tarea que extraiga los tags propios (los no
      definidos en javadoc) a un fichero en formato XML
      (changelog.xhtml y todo.xhtml).
    * Validar el código XML, HTML, etc (tidy).
    * Tarea para formatear el código fuente (jrefactory).
    * Migrar la documentacion /doc a xhtml y usar una hoja de estilo
      (css) común para el API (javadoc) y la documentación.
    * Soportar integración continua (builds automaticos). Integración
      con subversion.
=======================================================================
-->

<!-- P R O Y E C T O ================================================== -->
<project basedir=".." default="compile">

    <!-- P R O P E R T I E S   Y   L O G ============================== -->
    <record name="${basedir}/build.log" loglevel="verbose"/>
    <xmlproperty file="build/project.xml" keeproot="false" semanticattributes="true"/>
    <xmlproperty file="build/user.xml" keeproot="false" semanticattributes="true"/>

    <!-- T A R G E T S ================================================ -->
    <!-- INIT: Inicializa variables y muestra datos de la construcción actual. -->
    <target name="init">
        <tstamp>
            <format property="buildTimestamp" pattern="dd MMMM yyyy HH:mm:ss,SSS"/>
        </tstamp>
        <property environment="env"/>
        <property name="javacDebug" value="true"/>
        <property name="javacOptimize" value="false"/>
        <echo message="---------------------------------------------------------------------------"/>
        <echo message="PROYECTO"/>
        <echo message="  Nombre:             ${application.description}"/>
        <echo message="  Directorio:         ${basedir}"/>
        <echo message="  Fichero Creación:   ${ant.file}"/>
        <echo message="ENTORNO"/>
        <echo message="  Fecha Creación:     ${buildTimestamp}"/>
        <echo message="  Usuario:            ${user.name}"/>
        <echo message="  Directorio Actual:  ${user.dir}"/>
        <echo message="  Sistema Operativo:  ${os.name} ${os.version} (${os.arch})"/>
        <echo message="  Java SDK:           ${java.vendor} v${java.version}"/>
        <echo message="  Directorio JDK:     ${env.JAVA_HOME}"/>
        <echo message="  Ant:                ${ant.version}"/>
        <echo message="  Directorio Ant:     ${env.ANT_HOME}"/>
        <echo message="---------------------------------------------------------------------------"/>
    </target>

    <!-- PREPAREFILES: Formatea los ficheros de texto del proyecto. -->
    <target depends="init" name="preparefiles">
        <fixcrlf includes="**/?*.java"
            javafiles="true"
            srcdir="${path.java}"
            tab="remove"
            tablength="4"/>
    </target>

    <!-- CLEAN: Borra todos los ficheros generados. No borra las instantaneas del directorio de las distribuciones. -->
    <target depends="init" description="Borra todos los ficheros generados." name="clean">
        <delete includeEmptyDirs="true" failOnError="false">
            <fileset dir="${path.binary}" includes="**/*"/>
            <fileset dir="${path.dist}" includes="**/*" excludes="${application.name}*.zip"/>
            <fileset dir="${path.javadoc}" includes="**/*"/>
            <fileset dir="${path.temp}" includes="**/*"/>
            <fileset dir="${path.java}" includes="**/?*.class"/>
            <fileset dir="${basedir}" includes="**/*~ **/*.bak" defaultExcludes="false"/>
        </delete>
    </target>

    <!-- COMPILE: Compila los ficheros de código fuente del proyecto. -->
    <target depends="init" description="Compila los ficheros de código fuente del proyecto." name="compile">
        <javac debug="${javacDebug}" deprecation="true" destdir="${path.binary}" optimize="${javacOptimize}" srcdir="${path.java}">
            <classpath>
                <pathelement path="${path.binary}"/>
                <fileset dir="${path.libraryStore}" includes="${application.libraries}"/>
            </classpath>
            <include name="**/?*.java"/>
        </javac>
        <copy todir="${path.binary}">
            <fileset dir="${path.resource}" includes="**/*"/>
            <fileset dir="${path.files}" includes="**/*"/>
        </copy>
    </target>

    <!-- REBUILD: Recompila todos los ficheros de código fuente del proyecto. -->
    <target depends="clean,compile" description="Recompila todos los ficheros de código fuente del proyecto." name="rebuild"/>

    <!-- JAVADOC: Genera la documentación del código fuente (javadoc). -->
    <target depends="preparefiles" description="Genera la documentación del código fuente (javadoc)." name="javadoc">
        <copy todir="${path.javadoc}">
            <fileset dir="${path.javadocResource}" includes="**/*"/>
        </copy>
        <javadoc bottom="${doclet.bottom}"
            destdir="${path.javadoc}"
            doctitle="${doclet.doctitle}"
            footer="${doclet.footer}"
            header="${doclet.header}"
            private="true"
            sourcepath="${path.java}"
            packagenames="*"
            stylesheetfile="${path.doc}/doc.css"
            windowtitle="${application.description} API"/>
    </target>

    <!-- DOXYGEN: Genera la documentación del código fuente (doxygen). -->
    <target depends="preparefiles" description="Genera la documentación del código fuente (doxygen)." name="doxygen">
    </target>

    <!-- TESTS: Compila y ejecuta los test definidos en el código (JUnit) y en CheckStyle. -->
    <target depends="compile,preparefiles" description="Compila y ejecuta los test definidos en el código y en CheckStyle." name="tests">
        <taskdef resource="checkstyletask.properties" classpath="${path.checkstyleJar}"/>
        <!--
        <checkstyle config="${path.build}/code_check.xml">
            <fileset dir="${path.java}" includes="**/?*.java"/>
            <formatter type="xml" tofile="${path.doc}/code_check_report.xml"/>
            <formatter type="plain" tofile="${path.doc}/code_check_report.txt"/>
        </checkstyle>
        -->
        <junit showoutput="true" tempdir="">
            <classpath>
                <pathelement path="${path.binary}"/>
                <fileset dir="${path.libraryStore}" includes="${application.libraries}"/>
                <fileset dir="${path.libraryStore}" includes="${path.junitJar}"/>
            </classpath>
            <batchtest>
                <fileset dir="${path.test}" includes="**/?*.java"/>
            </batchtest>
            <formatter type="plain"/>
        </junit>
    </target>

    <!-- SNAPSHOT: Saca una instantanea del proyecto (copia de los ficheros del proyecto). -->
    <target depends="preparefiles" description="Crea una copia de los ficheros del proyecto." name="snapshot">
        <mkdir dir="${path.temp}/${path.binary}"/>
        <mkdir dir="${path.temp}/${path.dist}"/>
        <copy todir="${path.temp}">
            <filterset begintoken=">" endtoken=">">
                <filter token="${sign.storepass}&lt;/storepass" value=">&lt;/storepass>"/>
                <filter token="${sign.keypass}&lt;/keypass" value=">&lt;/keypass>"/>
            </filterset>
            <fileset dir="${basedir}" includes="${path.build}/**/*"/>
        </copy>
        <zip compress="true" zipfile="${path.dist}/${application.name}-${DSTAMP}${TSTAMP}.zip">
            <fileset dir="${basedir}" includes="${path.doc}/**/*" excludes="${path.javadoc}/**/*"/>
            <fileset dir="${basedir}" includes="${path.config}/**/*"/>
            <fileset dir="${basedir}" includes="${path.resource}/**/*"/>
            <fileset dir="${basedir}" includes="${path.java}/**/*"/>
            <fileset dir="${basedir}" includes="${path.files}/**/*"/>
            <fileset dir="${basedir}" includes="*.bat *.sh .*"/>
            <fileset dir="${path.temp}" includes="**/*"/>
        </zip>
        <delete dir="${path.temp}"/>
    </target>

    <!-- MKJAR: Crea un directorio con la estructura de ficheros del jar. -->
    <target depends="compile" description="Crea un directorio con la estructura de ficheros del jar." name="mkjar">
        <copy todir="${path.jar}">
            <fileset dir="${path.binary}" includes="**/?*.class" excludes="**/*Test.class"/>
            <fileset dir="${path.resource}" includes="**/*"/>
        </copy>
        <copy todir="${path.jar}/META-INF">
            <fileset dir="${path.config}" excludes="**/web.xml,**/*.tld"/>
        </copy>
        <manifest file="${path.jar}/META-INF/MANIFEST.MF">
            <attribute name="Built-By" value="${user.name}"/>
            <attribute name="Built-Timestamp" value="${buildTimestamp}"/>
            <attribute name="Built-JDK" value="${java.vendor} v${java.version}"/>
            <attribute name="Class-Path" value="${application.libraries}"/>
            <attribute name="Main-Class" value="${application.main}"/>
        </manifest>
    </target>

    <!-- JAR: Genera un fichero JAR. -->
    <target depends="mkjar" description="Genera un fichero JAR." name="jar">
        <jar basedir="${path.jar}"
            compress="true"
            jarfile="${path.dist}/${application.name}.jar"
            excludes="META-INF/**/*"
            manifest="${path.jar}/META-INF/MANIFEST.MF">
            <metainf dir="${path.jar}/META-INF/" excludes="MANIFEST.MF"/>
        </jar>
    </target>

    <!-- DIST: Genera una distribución con todos los jar necesarios (jar). -->
    <target depends="jar" description="Genera una distribución con todos los jar necesarios." name="dist">
        <jar basedir="${path.files}"
            compress="true"
            jarfile="${path.dist}/${application.name}files.jar"
            filesonly="true"/>
        <copy todir="${path.dist}">
            <fileset dir="${path.libraryStore}" includes="${application.libraries}" excludes="junit*.jar"/>
        </copy>
        <!--
        <signjar alias="${sign.alias}"
            storepass="${sign.storepass}"
            keypass="${sign.keypass}"
            sigfile="${application.name}">
            <fileset dir="${path.dist}" includes="*.jar"/>
        </signjar>
        -->
    </target>

    <!-- MKWAR: Crea un directorio con la estructura de ficheros del war. -->
    <target depends="compile" description="Crea un directorio con la estructura de ficheros del war." name="mkwar">
        <copy todir="${path.war}">
            <fileset dir="${path.files}" includes="**/*"/>
        </copy>
        <copy todir="${path.war}/WEB-INF">
            <fileset dir="${path.config}" includes="**/*"/>
        </copy>
        <copy todir="${path.war}/WEB-INF/lib">
            <fileset dir="${path.libraryStore}" includes="${application.libraries}" excludes="junit*.jar"/>
        </copy>
        <copy todir="${path.war}/WEB-INF/classes">
            <fileset dir="${path.binary}" includes="**/?*.class" excludes="**/*Test.class"/>
            <fileset dir="${path.resource}" includes="**/*"/>
        </copy>
        <mkdir dir="${path.war}/META-INF"/>
        <manifest file="${path.war}/META-INF/MANIFEST.MF">
            <attribute name="Built-By" value="${user.name}"/>
            <attribute name="Built-Timestamp" value="${buildTimestamp}"/>
            <attribute name="Built-JDK" value="${java.vendor} v${java.version}"/>
        </manifest>
    </target>

    <!-- WAR: Genera un fichero WAR. -->
    <target depends="mkwar" description="Genera un fichero WAR." name="war">
        <war basedir="${path.war}"
            compress="true"
            warfile="${path.dist}/${application.name}.war"
            excludes="WEB-INF/**/*,META-INF/**/*"
            webxml="${path.war}/WEB-INF/web.xml"
            manifest="${path.war}/META-INF/MANIFEST.MF">
            <lib dir="${path.war}/WEB-INF/lib" includes="**/?*.jar"/>
            <classes dir="${path.war}/WEB-INF/classes" includes="**/*"/>
            <webinf dir="${path.war}/WEB-INF" excludes="web.xml classes/**/* lib/**/*"/>
        </war>
        <!--
        <signjar jar="${path.dist}/${application.name}.war"
            alias="${sign.alias}"
            storepass="${sign.storepass}"
            keypass="${sign.keypass}"
            sigfile="${application.name}"/>
        -->
    </target>

    <!-- RELEASE: Genera una distribución optimizada y sin información de depuración. -->
    <target depends="init"  description="Genera una distribución optimizada y sin información de depuración." name="release">
        <condition property="distTarget" value="dist">
            <equals arg1="${application.type}" arg2="jar" casesensitive="false" trim="true"/>
        </condition>
        <condition property="distTarget" value="war">
            <equals arg1="${application.type}" arg2="war" casesensitive="false" trim="true"/>
        </condition>
        <antcall target="${distTarget}">
            <param name="javacDebug" value="false"/>
            <param name="javacOptimize" value="true"/>
        </antcall>
    </target>

    <!-- RELEASEFULL: Genera el archivo de la aplicación (binarios, documentación y código). -->
    <target depends="javadoc,snapshot,release"  description="Genera el archivo de la aplicación (binarios, documentación y código)." name="releaseFull">
        <zip basedir="${path.dist}" compress="true" includes="**/*" zipfile="${path.dist}/${application.name}.zip">
            <fileset dir="${path.dist}" includes="*.jar"/>
        </zip>
    </target>

</project>
<!-- E O F ============================================================ -->
